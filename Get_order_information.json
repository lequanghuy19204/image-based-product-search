{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e7bf73fd-51cf-40d3-babb-75c9d58adf7a",
              "name": "page_id",
              "value": "={{ $json.body[0].conversation_link.split(\"/\")[3].split(\"?\")[0] }}",
              "type": "string"
            },
            {
              "id": "bc389ea2-5c12-4abe-9768-21be4b290047",
              "name": "conversation_id",
              "value": "={{ $json.body[0].conversation_link.split(\"c_id=\")[1] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        220,
        560
      ],
      "id": "4c945d3f-290b-4635-bc19-afdbeeac88eb",
      "name": "Extract URL Parameters"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://pages.fm/api/v1/pages/{{ $json.page_id }}/generate_page_access_token",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "access_token",
              "value": "={{ $('Webhook').item.json.body[0].access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        560
      ],
      "id": "8306fb9a-4e2b-49b9-9c3a-77b6031d4cf2",
      "name": "HTTP Request Generate page_access_token"
    },
    {
      "parameters": {
        "url": "=https://pages.fm/api/public_api/v1/pages/{{ $('Code').item.json.page_id }}/conversations/{{ $('Code').item.json.conversation_id }}/messages ",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=page_access_token",
              "value": "={{ $('HTTP Request Generate page_access_token').item.json.page_access_token }}"
            },
            {
              "name": "customer_id",
              "value": "={{ $('HTTP Request Conversations').item.json.conversations[0].customer_id }}"
            },
            {
              "name": "current_count"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        260
      ],
      "id": "83b572c6-bc02-444f-ab18-e6c67dc91899",
      "name": "HTTP Request Get messages"
    },
    {
      "parameters": {
        "url": "https://pages.fm/api/v1/pages",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "access_token",
              "value": "={{ $('Webhook').item.json.body[0].access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        560
      ],
      "id": "08a29735-b4ac-4f03-a7be-d30c716fa48d",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4bdf1092-650d-417a-932a-caad92298823",
              "name": "pages",
              "value": "={{ $json.categorized.activated }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        560
      ],
      "id": "e8f210fc-a03d-43b0-9892-93bcd7282bef",
      "name": "Page List"
    },
    {
      "parameters": {
        "jsCode": "const pageListString = $input.first().json.pages;\nconst pages = JSON.parse(pageListString); // Parse chuỗi JSON thành object\n\nreturn [{\n  json: {\n    pages: pages\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        560
      ],
      "id": "b4f662a4-2846-4cfb-8800-c3617de0ac8f",
      "name": "Parse Page List"
    },
    {
      "parameters": {
        "jsCode": "const inputPageId = $('Extract URL Parameters').first().json.page_id;\nconst conversationId = $('Extract URL Parameters').first().json.conversation_id;\nconst pages = $input.first().json.pages;\n\nlet matchedPageId = inputPageId; // Giữ nguyên page_id ban đầu nếu không khớp\nlet check_name = \"\";\n\n// Tìm trong danh sách pages\nfor (const page of pages) {\n  if (page.id === inputPageId || page.name === inputPageId || page.username === inputPageId) {\n    matchedPageId = page.id; // Nếu khớp, lấy id của trang\n    check_name = page.name;\n    break;\n  }\n}\n\n// Lấy page_access_token tương ứng\nconst matchedPage = pages.find(page => page.id === matchedPageId);\n\n// Trả về kết quả\nreturn [{\n  json: {\n    page_id: matchedPageId,\n    page_name: check_name,\n    conversation_id: conversationId,\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        560
      ],
      "id": "9ec6f75b-acd2-416c-873e-5aa7388f90b0",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "=https://pages.fm/api/public_api/v2/pages/{{ $('Code').item.json.page_id }}/conversations",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "page_access_token",
              "value": "={{ $json.page_access_token }}"
            },
            {
              "name": "page_id",
              "value": "={{ $('Code').item.json.page_id }}"
            },
            {
              "name": "last_conversation_id",
              "value": "={{ $('Code').item.json.conversation_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1540,
        560
      ],
      "id": "67d08f0c-a317-4da7-90d9-f0a3b2b47328",
      "name": "HTTP Request Conversations"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.request_body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2780,
        300
      ],
      "id": "e85fc3fb-1a91-4d30-aed4-f150c83e2bb5",
      "name": "Call OpenRouter API",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const combinedMessages = $input.first().json.combined_messages;\n\nconst requestBody = {\n  model: \"google/gemini-2.0-pro-exp-02-05:free\",\n  messages: [\n    {\n      role: \"user\",\n      content: [\n        {\n          type: \"text\",\n          text: `Xử lý đoạn hội thoại sau và trả về thông tin đơn hàng dưới dạng JSON. Lưu ý rằng hội thoại có thể chứa nhiều đơn hàng, bao gồm cả đơn hàng đã giao và đơn hàng mới. Hãy phân tích ngữ cảnh để xác định các đơn hàng riêng biệt và trả về danh sách các đơn hàng với các trường sau: weight, height, phone_number, full_address, province, district, ward, quantity, size, color, order_price, money_deposit, shipping_fee.\n\nHướng dẫn cụ thể:\n1. Nếu có thông tin về cân nặng (weight) và chiều cao (height), chỉ lấy thông tin mới nhất từ hội thoại và áp dụng cho các đơn hàng chưa có thông tin này.\n2. Địa chỉ (full_address) cần được phân tích chính xác để lấy thông tin province (tỉnh/thành phố), district (quận/huyện), ward (phường/xã). Nếu địa chỉ không rõ ràng, hãy cố gắng suy luận hợp lý dựa trên ngữ cảnh hội thoại và địa lý Việt Nam. **Bắt buộc phải điền đầy đủ các trường province, district, và ward, không được để trống (null). Nếu không thể xác định chính xác ward, hãy suy luận hợp lý hoặc đặt giá trị mặc định phù hợp với district.**\n\n3. Số lượng (quantity), kích thước (size), và màu sắc (color) phải được xác định rõ từ hội thoại, nếu không có thông tin thì để null.\n4. Giá đơn hàng (order_price), phí vận chuyển (shipping_fee), tiền đặt cọc(money_deposit) cần được lấy từ hội thoại, nếu không rõ thì để null.\n5. Chỉ trả về các đơn hàng có thông tin đủ để xác định (ít nhất có phone_number hoặc full_address).\n6. Trả về dưới dạng mảng JSON, không bao gồm giải thích, ví dụ: [{\"weight\": null, \"height\": null, ...}, ...]\n\nĐoạn hội thoại: \\n${combinedMessages}`\n        }\n      ]\n    }\n  ],\n  temperature: 0.9\n};\n\nreturn [{\n  json: {\n    request_body: requestBody\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2640,
        560
      ],
      "id": "1ea0d2eb-54fa-42cc-bec7-f72b0891a1be",
      "name": "Prepare OpenRouter Body"
    },
    {
      "parameters": {
        "jsCode": "try {\n  const rawContent = $input.first().json.text;\n  const jsonString = rawContent\n    .replace(/```json\\n/, '')\n    .replace(/\\n```/, '')\n    .trim();\n  const parsedData = JSON.parse(jsonString);\n  const orders = Array.isArray(parsedData) ? parsedData : [parsedData];\n  return orders.map(order => ({\n    json: order\n  }));\n} catch (error) {\n  return [{\n    json: {\n      error: \"Failed to parse JSON\",\n      rawContent: $input.first().json.choices[0].message.content\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3236,
        560
      ],
      "id": "7906459b-68bf-42db-bed0-bcd5f261c88e",
      "name": "Parse OpenRouter Response"
    },
    {
      "parameters": {
        "url": "=https://pages.fm/api/public_api/v1/pages/{{ $('Code').item.json.page_id }}/conversations/{{ $('Code').item.json.conversation_id }}/messages ",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=page_access_token",
              "value": "={{ $('HTTP Request Generate page_access_token').item.json.page_access_token }}"
            },
            {
              "name": "customer_id",
              "value": "={{ $('HTTP Request Conversations').item.json.conversations[0].customer_id }}"
            },
            {
              "name": "current_count",
              "value": "=30"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        460
      ],
      "id": "bd7e2cf9-4511-4e65-bb9e-99a81544bdc6",
      "name": "HTTP Request Get messages1"
    },
    {
      "parameters": {
        "url": "=https://pages.fm/api/public_api/v1/pages/{{ $('Code').item.json.page_id }}/conversations/{{ $('Code').item.json.conversation_id }}/messages ",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=page_access_token",
              "value": "={{ $('HTTP Request Generate page_access_token').item.json.page_access_token }}"
            },
            {
              "name": "customer_id",
              "value": "={{ $('HTTP Request Conversations').item.json.conversations[0].customer_id }}"
            },
            {
              "name": "current_count",
              "value": "=60"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        660
      ],
      "id": "3477bb26-fb40-4f0a-81a4-f42f26eff157",
      "name": "HTTP Request Get messages2"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1980,
        539
      ],
      "id": "21fb4f8f-d7cb-4292-b425-069ee4e963da",
      "name": "Merge Messages"
    },
    {
      "parameters": {
        "url": "=https://pages.fm/api/public_api/v1/pages/{{ $('Code').item.json.page_id }}/conversations/{{ $('Code').item.json.conversation_id }}/messages ",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=page_access_token",
              "value": "={{ $('HTTP Request Generate page_access_token').item.json.page_access_token }}"
            },
            {
              "name": "customer_id",
              "value": "={{ $('HTTP Request Conversations').item.json.conversations[0].customer_id }}"
            },
            {
              "name": "current_count",
              "value": "=90"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        860
      ],
      "id": "d383a4f1-27a6-4d75-991b-c10f53c54b30",
      "name": "HTTP Request Get messages3"
    },
    {
      "parameters": {
        "jsCode": "// Lấy dữ liệu từ Merge Messages\nconst messages = $('HTTP Request Get messages').first().json.messages;\nconst messages1 = $('HTTP Request Get messages1').first().json.messages;\nconst messages2 = $('HTTP Request Get messages2').first().json.messages;\nconst messages3 = $('HTTP Request Get messages3').first().json.messages;\n\n// Gộp các tin nhắn từ 3 lần gọi thành một mảng duy nhất\nconst allMessages = [...messages3, ...messages2, ...messages1, ...messages];\n\n// Đảo ngược thứ tự để tin nhắn từ lần gọi sau (cũ hơn) lên trước\nconst reversedMessages = allMessages.slice();\n\nreturn [{\n  json: {\n    all_messages: reversedMessages\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2200,
        560
      ],
      "id": "6d182d46-05c7-469f-85f3-ae4e1bfca121",
      "name": "Combine All Messages"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.request_body.messages[0].content[0].text }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2860,
        560
      ],
      "id": "a4cc6fd1-1b53-4bb6-b197-d4a0c8f49963",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-chat-v3-0324:free",
        "options": {
          "temperature": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2840,
        760
      ],
      "id": "057e9b33-e81a-4029-a8ab-ad5ee0c291cf",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "DcmdrY9j4xr6JtBh",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "multipleMethods": true,
        "httpMethod": [
          "POST"
        ],
        "path": "create-order",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        560
      ],
      "id": "71d869f3-ce41-42a4-8c07-63703ca5a4fb",
      "name": "Webhook",
      "webhookId": "79af9956-0fb1-4908-b3f0-df571cac9ddd"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3676,
        560
      ],
      "id": "e0ef7696-94b1-4253-80e5-bb30ac1d4413",
      "name": "Respond to Webhook",
      "alwaysOutputData": false,
      "retryOnFail": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "666877a9-28fa-4a96-ad5a-05075d1cfb26",
              "name": "weight",
              "value": "={{ $json.weight }}",
              "type": "string"
            },
            {
              "id": "6e228041-7b94-4851-99cd-b3005a063994",
              "name": "height",
              "value": "={{ $json.height }}",
              "type": "string"
            },
            {
              "id": "bf050c4c-1815-4338-9a79-f0b622c04e71",
              "name": "phone_number",
              "value": "={{ $json.phone_number }}",
              "type": "string"
            },
            {
              "id": "85aa0fa4-1cf0-454d-9634-4a56481866b9",
              "name": "full_address",
              "value": "={{ $json.full_address }}",
              "type": "string"
            },
            {
              "id": "5f562cf5-d998-47b5-b884-25a41541c59c",
              "name": "province",
              "value": "={{ $json.province }}",
              "type": "string"
            },
            {
              "id": "0aa3cf83-ae2c-4ae3-84e1-4341dd51cb46",
              "name": "district",
              "value": "={{ $json.district }}",
              "type": "string"
            },
            {
              "id": "69edd8f3-6e66-4ab1-be00-d675283a5a29",
              "name": "ward",
              "value": "={{ $json.ward }}",
              "type": "string"
            },
            {
              "id": "4276d9bc-121e-4964-a906-784fe4ee79bc",
              "name": "quantity",
              "value": "={{ $json.quantity }}",
              "type": "string"
            },
            {
              "id": "23ca203b-b41f-47f1-8b2e-02f718def725",
              "name": "size",
              "value": "={{ $json.size }}",
              "type": "string"
            },
            {
              "id": "22e1d797-daf6-4bd9-8417-d7a11833241e",
              "name": "color",
              "value": "={{ $json.color }}",
              "type": "string"
            },
            {
              "id": "0748c3ee-7f48-4c5c-951b-6a58fb8e5b74",
              "name": "order_price",
              "value": "={{ $json.order_price }}",
              "type": "string"
            },
            {
              "id": "9eda11dd-1657-4156-95e8-0dbf207f5089",
              "name": "shipping_fee",
              "value": "={{ $json.shipping_fee }}",
              "type": "string"
            },
            {
              "id": "a798c3e5-beae-42d2-99f4-7af0785a8cfc",
              "name": "money_deposit",
              "value": "={{ $json.money_deposit }}",
              "type": "string"
            },
            {
              "id": "2b94e954-55a7-4f5c-9d85-6ce6d5f2374d",
              "name": "name_customers",
              "value": "={{ $('HTTP Request Conversations').first().json.conversations[0].page_customer.name }}",
              "type": "string"
            },
            {
              "id": "5ef0c371-4bfa-4408-ace8-b6af4419343c",
              "name": "gender",
              "value": "={{ $('HTTP Request Conversations').first().json.conversations[0].page_customer.gender }}",
              "type": "string"
            },
            {
              "id": "fa5cf6e6-a966-4168-829d-5d7cde762e4c",
              "name": "name_page",
              "value": "={{ $('Code').first().json.page_name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3456,
        560
      ],
      "id": "f790da8c-c9f7-404a-88b0-f1428e2fb431",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Lấy mảng tin nhắn đã gộp từ node Combine All Messages\nconst messages = $input.first().json.all_messages;\n\n// Trích xuất tất cả original_message và gộp thành một chuỗi\nconst combinedMessages = messages\n  .map(message => message.original_message.trim()) // Lấy original_message và loại bỏ khoảng trắng thừa\n  .filter(message => message !== \"\") // Loại bỏ các tin nhắn rỗng\n  .join(\" | \"); // Gộp các tin nhắn lại, ngăn cách bằng \" | \"\n\n// Trả về chuỗi gộp\nreturn [{\n  json: {\n    combined_messages: combinedMessages\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2420,
        560
      ],
      "id": "2f2e66b1-9911-46f8-96a1-4fc7f99dd0de",
      "name": "Combine Messages"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract URL Parameters": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Generate page_access_token": {
      "main": [
        [
          {
            "node": "HTTP Request Conversations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Page List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Page List": {
      "main": [
        [
          {
            "node": "Parse Page List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Page List": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request Generate page_access_token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Conversations": {
      "main": [
        [
          {
            "node": "HTTP Request Get messages",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request Get messages1",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request Get messages2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request Get messages3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Get messages": {
      "main": [
        [
          {
            "node": "Merge Messages",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Prepare OpenRouter Body": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Get messages1": {
      "main": [
        [
          {
            "node": "Merge Messages",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "HTTP Request Get messages2": {
      "main": [
        [
          {
            "node": "Merge Messages",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request Get messages3": {
      "main": [
        [
          {
            "node": "Merge Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Messages": {
      "main": [
        [
          {
            "node": "Combine All Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine All Messages": {
      "main": [
        [
          {
            "node": "Combine Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Parse OpenRouter Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract URL Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse OpenRouter Response": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Messages": {
      "main": [
        [
          {
            "node": "Prepare OpenRouter Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenRouter API": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d5c0cc4d-3691-4976-9781-8dda7e337c5b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "dd6bea42c9f6a2952a06b21cbc14b1b448ce2abdf6625e8b1530d08863ea3e7f"
  },
  "id": "hiNnnE7eKl7jXvn6",
  "tags": []
}